package teammates.common.util;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.TimeZone;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import teammates.common.datatransfer.UserType;
import teammates.common.datatransfer.attributes.AccountAttributes;
import teammates.common.datatransfer.attributes.StudentAttributes;
import teammates.common.exception.TeammatesException;
import teammates.common.util.ActivityLogEntry.Builder;

/**
 * Factory to generate log message
 */
public class LogMessageGenerator {
    public static final Pattern PATTERN_ACTION_NAME = Pattern.compile("^/\\S+?/(?<actionName>[^\\s\\?]*)");
    public static final String PATTERN_ACTION_NAME_GROUP = "actionName";

    /**
     * Generates log message for all *Action page.
     *
     * @param url URL of the action
     * @param params parameterMap of the request
     * @param currUser login information generated by {@link teammates.logic.api.GateKeeper}
     * @param userAccount authentication user account generated by action
     * @param unregisteredStudent authentication unregisteredStudent attributes generated by action
     * @param logMessage log message to show to admin
     * @return log message in the form specified in {@link ActivityLogEntry}
     */
    public String generatePageActionLogMessage(String url, Map<String, String[]> params, UserType currUser,
            AccountAttributes userAccount, StudentAttributes unregisteredStudent, String logMessage) {
        Builder builder = generateBasicActivityLogEntry(url, params, currUser);

        boolean isUnregisteredStudent = unregisteredStudent != null;
        boolean isAccountWithGoogleId = userAccount != null && userAccount.googleId != null;
        if (isUnregisteredStudent) {
            updateInfoForUnregisteredStudent(builder, unregisteredStudent);
        } else if (isAccountWithGoogleId) {
            updateInfoForNormalUser(builder, currUser, userAccount);
        }

        builder.withLogMessage(logMessage);
        return builder.build().generateLogMessage();
    }

    private void updateInfoForUnregisteredStudent(Builder builder, StudentAttributes unregisteredStudent) {
        String role = Const.ActivityLog.ROLE_UNREGISTERED;
        if (unregisteredStudent.course != null && !unregisteredStudent.course.isEmpty()) {
            role = Const.ActivityLog.ROLE_UNREGISTERED + ":" + unregisteredStudent.course;
        }
        builder.withUserRole(role)
               .withUserName(unregisteredStudent.name)
               .withUserEmail(unregisteredStudent.email);
    }

    private void updateInfoForNormalUser(Builder builder, UserType currUser, AccountAttributes userAccount) {
        checkAndUpdateForMasqueradeMode(builder, currUser, userAccount);
        builder.withUserGoogleId(userAccount.googleId)
               .withUserEmail(userAccount.email)
               .withUserName(userAccount.name);
    }

    private void checkAndUpdateForMasqueradeMode(Builder builder, UserType loggedInUser, AccountAttributes account) {
        if (loggedInUser != null && loggedInUser.id != null && account != null) {
            boolean isMasqueradeMode = !loggedInUser.id.equals(account.googleId);
            builder.withMasqueradeUserRole(isMasqueradeMode);
            // TODO discuss: should we rebuild log id?
            builder.withLogId(generateLogIdWithGoogleId(account.googleId, builder.getLogTime()));
        }
    }

    /**
     * Generates log message for servlet action failure.
     *
     * @param url URL of the request
     * @param params parameterMap of the request
     * @param e Exception thrown in the failure
     * @param currUser login information generated by {@link teammates.logic.api.GateKeeper}
     * @return log message in the form specified in {@link ActivityLogEntry}
     */
    public String generateActionFailureLogMessage(String url, Map<String, String[]> params,
            Exception e, UserType currUser) {
        Builder builder = generateBasicActivityLogEntry(url, params, currUser);

        String message = "<span class=\"text-danger\">Servlet Action failure in "
                         + builder.getActionName() + "<br>"
                         + e.getClass() + ": " + TeammatesException.toStringWithStackTrace(e) + "<br>"
                         + JsonUtils.toJson(params, Map.class) + "</span>";
        builder.withLogMessage(message);

        builder.withActionResponse(Const.ACTION_RESULT_FAILURE);

        return builder.build().generateLogMessage();
    }

    /**
     * Generates log message for system error report.
     *
     * @param url URL of the request
     * @param params parameterMap of the request
     * @param errorEmail EmailWrapper to send to the system admin
     * @param currUser login information generated by {@link teammates.logic.api.GateKeeper}
     * @return log message in the form specified in {@link ActivityLogEntry}
     */
    public String generateSystemErrorLogMessage(String url, Map<String, String[]> params, EmailWrapper errorEmail,
            UserType currUser) {
        Builder builder = generateBasicActivityLogEntry(url, params, currUser);

        if (errorEmail != null) {
            String message = "<span class=\"text-danger\">" + errorEmail.getSubject() + "</span>"
                             + "<br>"
                             + "<a href=\"#\" onclick=\"showHideErrorMessage('error" + errorEmail.hashCode() + "');\">"
                               + "Show/Hide Details >>"
                             + "</a>"
                             + "<br>"
                             + "<span id=\"error" + errorEmail.hashCode() + "\" style=\"display: none;\">"
                               + errorEmail.getContent()
                             + "</span>";
            builder.withLogMessage(message);
        }

        builder.withActionResponse(Const.ACTION_RESULT_SYSTEM_ERROR_REPORT);

        return builder.build().generateLogMessage();
    }

    /**
     * Generates log message with basic information.
     *
     * @param url URL of the request
     * @param params parameterMap of the request
     * @param message log message to show to admin
     * @param currUser login information generated by {@link teammates.logic.api.GateKeeper}
     * @return log message in form specified in {@link ActivityLogEntry}
     */
    public String generateBasicActivityLogMessage(String url, Map<String, String[]> params, String message,
            UserType currUser) {
        Builder builder = generateBasicActivityLogEntry(url, params, currUser);

        builder.withLogMessage(message);

        return builder.build().generateLogMessage();
    }

    /**
     * Generates a basic builder for activityLogEntry.
     *
     * @param url URL of the request
     * @param params parameterMap of the request
     * @param currUser login information generated by {@link teammates.logic.api.GateKeeper}
     * @return Builder builder with basic information
     */
    private Builder generateBasicActivityLogEntry(String url, Map<String, String[]> params, UserType currUser) {
        String actionName = getActionNameFromUrl(url);
        long currTime = System.currentTimeMillis();
        Builder builder = new Builder(actionName, url, currTime);

        if (isAutomatedAction(url)) {
            builder.withLogId(generateLogIdInAutomatedAction(currTime));
            builder.withUserRole(Const.ActivityLog.ROLE_AUTO);
        } else if (currUser == null) {
            builder.withLogId(generateLogIdWithoutGoogleId(params, currTime));
            builder.withUserGoogleId(Const.ActivityLog.AUTH_NOT_LOGIN);
        } else {
            builder.withLogId(generateLogIdWithGoogleId(currUser.id, currTime));
            builder.withUserGoogleId(currUser.id);
            updateRoleForLoggedInUser(builder, currUser);
        }

        return builder;
    }

    private void updateRoleForLoggedInUser(Builder builder, UserType currUser) {
        if (currUser.isAdmin) {
            builder.withUserRole(Const.ActivityLog.ROLE_ADMIN);
            downgradeRoleToStudentIfNecessary(builder);
            downgradeRoleToInstructorIfNecessary(builder);
        } else if (currUser.isInstructor && currUser.isStudent) {
            builder.withUserRole(Const.ActivityLog.ROLE_INSTRUCTOR);
            downgradeRoleToStudentIfNecessary(builder);
        } else if (currUser.isStudent) {
            builder.withUserRole(Const.ActivityLog.ROLE_STUDENT);
        } else if (currUser.isInstructor) {
            builder.withUserRole(Const.ActivityLog.ROLE_INSTRUCTOR);
        } else {
            builder.withUserRole(Const.ActivityLog.ROLE_UNREGISTERED);
        }
    }

    private void downgradeRoleToStudentIfNecessary(Builder builder) {
        if (isStudentPage(builder.getActionName())) {
            builder.withUserRole(Const.ActivityLog.ROLE_STUDENT);
        }
    }

    private void downgradeRoleToInstructorIfNecessary(Builder builder) {
        if (isInstructorPage(builder.getActionName())) {
            builder.withUserRole(Const.ActivityLog.ROLE_INSTRUCTOR);
        }
    }

    private boolean isInstructorPage(String actionName) {
        return actionName.toLowerCase().startsWith(Const.ActivityLog.PREFIX_INSTRUCTOR_PAGE)
                || Const.ActionURIs.INSTRUCTOR_FEEDBACK_STATS_PAGE.contains(actionName);
    }

    private boolean isStudentPage(String actionName) {
        return actionName.toLowerCase().startsWith(Const.ActivityLog.PREFIX_STUDENT_PAGE);
    }

    private boolean isAutomatedAction(String url) {
        return url.startsWith(Const.ActivityLog.PREFIX_AUTO_PAGE);
    }

    private String getActionNameFromUrl(String requestUrl) {
        Matcher m = PATTERN_ACTION_NAME.matcher(requestUrl);
        if (m.find()) {
            return m.group(PATTERN_ACTION_NAME_GROUP);
        } else {
            return String.format(Const.ActivityLog.MESSAGE_ERROR_ACTION_NAME, requestUrl);
        }
    }

    private String generateLogIdInAutomatedAction(long time) {
        return Const.ActivityLog.ROLE_AUTO + Const.ActivityLog.FIELD_CONNECTOR + formatTimeForId(new Date(time));
    }

    private String generateLogIdWithoutGoogleId(Map<String, String[]> params, long time) {
        String courseId = HttpRequestHelper.getValueFromParamMap(params, Const.ParamsNames.COURSE_ID);
        String studentEmail = HttpRequestHelper.getValueFromParamMap(params, Const.ParamsNames.STUDENT_EMAIL);
        if (courseId != null && studentEmail != null) {
            return studentEmail + Const.ActivityLog.FIELD_CONNECTOR
                   + courseId + Const.ActivityLog.FIELD_CONNECTOR
                   + formatTimeForId(new Date(time));
        }
        return Const.ActivityLog.AUTH_NOT_LOGIN + Const.ActivityLog.FIELD_CONNECTOR + formatTimeForId(new Date(time));
    }

    private String generateLogIdWithGoogleId(String googleId, long time) {
        return googleId + Const.ActivityLog.FIELD_CONNECTOR + formatTimeForId(new Date(time));
    }

    private String formatTimeForId(Date date) {
        SimpleDateFormat sdf = new SimpleDateFormat(Const.ActivityLog.TIME_FORMAT_LOGID);
        sdf.setTimeZone(TimeZone.getTimeZone(Const.SystemParams.ADMIN_TIME_ZONE));
        return sdf.format(date.getTime());
    }
}
