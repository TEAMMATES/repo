{
    // http://eslint.org/docs/rules/

    "env": {
        "browser": true,     // browser global variables.
        "jquery": true,      // jquery global variables.
        "qunit": true,       // qunit global variables.
    },

    "globals": {
        // e.g. "angular": true
    },

    "rules": {
        ////////// Unnecessary/Unused Ops/Vars/Chars //////////

        "comma-dangle": 2,                                  // disallow trailing commas in object literals
        "no-empty": 2,                                      // disallow empty statements
        "no-extra-boolean-cast": 2,                         // disallow double-negation boolean casts in a boolean context
        "no-extra-parens": 2,                               // disallow unnecessary parentheses
        "no-extra-semi": 2,                                 // disallow unnecessary semicolons
        "no-unreachable": 2,                                // disallow unreachable statements after a return, throw, continue, or break statement
        "no-unused-expressions": 2,                         // disallow usage of expressions in statement position
        "no-unused-labels": 2,                              // disallow unused labels
        "no-unused-vars": ["error", { "vars": "local" }],   // disallow declaration of variables that are not used in the code
        "no-useless-call": 2,                               // disallow unnecessary calls to .call() and .apply()
        "no-useless-concat": 2,                             // disallow unnecessary concatenation of literals or template literals
        "no-useless-escape": 2,                             // disallow unnecessary escape characters
        "semi": 2,                                          // require use of semicolons instead of ASI


        ////////// Possible Errors //////////

        "no-cond-assign": 2,          // disallow assignment in conditional expressions
        "no-console": 2,              // disallow use of console
        "no-constant-condition": 2,   // disallow use of constant expressions in conditions
        "no-control-regex": 2,        // disallow control characters in regular expressions
        "no-debugger": 2,             // disallow use of debugger
        "no-dupe-args": 2,            // disallow duplicate arguments in function definitions
        "no-dupe-keys": 2,            // disallow duplicate keys when creating object literals
        "no-duplicate-case": 2,       // disallow duplicate case labels
        "no-empty-character-class": 2,// disallow the use of empty character classes in regular expressions
        "no-ex-assign": 2,            // disallow assigning to the exception in a catch block
        "no-func-assign": 2,          // disallow overwriting functions written as function declarations
        "no-inner-declarations": 2,   // disallow function or variable declarations in nested blocks
        "no-invalid-regexp": 2,       // disallow invalid regular expression strings in the RegExp constructor
        "no-negated-in-lhs": 2,       // disallow negation of the left operand of an in expression
        "no-obj-calls": 2,            // disallow the use of object properties of the global object (Math and JSON) as functions
        "no-regex-spaces": 2,         // disallow multiple spaces in a regular expression literal
        "no-sparse-arrays": 2,        // disallow sparse arrays
        "no-unexpected-multiline": 2, // disallow confusing multiline expressions
        "valid-typeof": 2,            // Ensure that the results of typeof are compared against a valid string


        ////////// Best Practices //////////

        "no-else-return": 2,        // disallow else after a return in an if
        "no-fallthrough": 2,        // disallow fallthrough of case statements
        "no-lonely-if": 2,          // disallow if as the only statement in an else block
        "default-case": 2,          // require default case in switch statements

        "eqeqeq": 2,                // require the use of === and !==
        "no-case-declarations": 2,  // disallow lexical declarations in case clauses
        "no-empty-pattern": 2,      // disallow empty destructuring patterns
        "no-octal": 2,              // disallow use of octal literals
        "no-redeclare": 2,          // disallow declaring the same variable more then once
        "no-self-assign": 2,        // disallow assignments where both sides are exactly the same


        ////////// Voids //////////

        "no-eq-null": 2,        // disallow comparisons to null without a type-checking operator
        "no-undef-init": 2,     // disallow use of undefined when initializing variables
        "use-isnan": 2,         // disallow comparisons with the value NaN


        ////////// Variables //////////

        "no-delete-var": 2,               // disallow deletion of variables
        "no-undef": 0,                    // disallow use of undeclared variables unless mentioned in a /*global */ block

        // no-undef is recommended to be turned on but currently we used too many variables from other scripts


        ////////// Whitespace Styles //////////

        "array-bracket-spacing": 2,                         // disallow space inside array brackets
        "block-spacing": 2,                                 // enforce consistent spacing inside single-line blocks
        "comma-spacing": 2,                                 // disallow space before comma, require space after comma
        "computed-property-spacing": 2,                     // disallow space inside property brackets
        "key-spacing": 2,                                   // disallow space before colon, require space after colon in object literal properties
        "keyword-spacing": 2,                               // require space after certain keywords
        "no-mixed-spaces-and-tabs": 2,                      // disallow mixed spaces and tabs for indentation
        "no-spaced-func": 2,                                // disallow space between function identifier and application
        "object-curly-spacing": ["error", "always"],        // require space inside object blocks
        "semi-spacing": 2,                                  // disallow space before semicolon
        "space-before-blocks": 2,                           // require space before blocks
        "space-before-function-paren": ["error", "never"],  // disallow space after function names
        "space-in-parens": 2,                               // disallow space inside parentheses
        "space-infix-ops": 2,                               // require space around operators
        "space-unary-ops": 2,                               // disallow space before/after unary operators

        "eol-last": 2,                                                  // enforce newline at the end of file, with no multiple empty lines
        "indent": ["error", 4, { "SwitchCase": 1 }],                    // enforce consistent indentation of 4 spaces, including switch cases
        "no-irregular-whitespace": 2,                                   // disallow irregular whitespace outside of strings and comments
        "no-multi-spaces": 2,                                           // disallow use of multiple spaces
        "no-trailing-spaces": ["error", { "skipBlankLines": true}],     // disallow trailing whitespace at the end of lines
        "quote-props": ["error", "consistent-as-needed"],               // require quotes around object literal property names
        "quotes": ["error", "single", { "avoidEscape": true }],         // require single quotes to be used unless it necessitates escaping
        "spaced-comment": ["error", "always"],                          // require a space immediately following the // in a line comment


        ////////// Stylistic Issues //////////

        "brace-style": 2,                                                                   // enforce one true brace style
        "comma-style": 2,                                                                   // enforce one true comma style
        "curly": 2,                                                                         // specify curly brace conventions for all control statements
        "dot-location": ["error", "property"],                                              // enforce consistent newlines before dots
        "operator-linebreak": ["error", "before", { "overrides": { "=": "after" } }],       // enforce consistent linebreak style for operators


        ////////// Naming Conventions //////////

        "camelcase": 2,                 // require camel case names
        "new-cap": 2,                   // require a capital letter for constructors
        "no-underscore-dangle": 2,      // disallow dangling underscores in identifiers


        ////////// Constructors //////////

        "one-var": ["error", "never"],      // allow just one var statement per function
        "new-parens": 2,                    // disallow the omission of parentheses when invoking a constructor with no arguments
        "no-array-constructor": 2,          // disallow use of the Array constructor
        "no-new": 2,                        // disallow use of new operator when not part of the assignment or comparison
        "no-new-func": 2,                   // disallow use of new operator for Function object
        "no-new-object": 2,                 // disallow use of the Object constructor
        "no-new-wrappers": 2,               // disallows creating new instances of String, Number, and Boolean


        // These rules are not enforced (and not in the recommended list provided by ESLint either),
        // but kept here for reference and possible change in policy in the future


        ////////// Possible Errors //////////

        "no-unsafe-finally": 0,       // disallow control flow statements in finally blocks
        "valid-jsdoc": 0,             // Ensure JSDoc comments are valid


        ////////// Stylistic Issues //////////

        "consistent-this": 0,           // enforces consistent naming when capturing the current execution context
        "func-names": 0,                // enforce named function expressions
        "func-style": 0,                // enforces use of function declarations or expressions
        "id-blacklist": 0,              // disallow specified identifiers
        "id-length": 0,                 // enforce minimum and maximum identifier lengths
        "id-match": 0,                  // require identifiers to match a specified regular expression
        "jsx-quotes": 0,                // enforce the consistent use of either double or single quotes in JSX attributes
        "linebreak-style": 0,           // enforce consistent linebreak style
        "lines-around-comment": 0,      // require empty lines around comments
        "max-depth": 0,                 // specify the maximum depth that blocks can be nested
        "max-len": 0,                   // specify the maximum length of a line in your program
        "max-nested-callbacks": 0,      // specify the maximum depth callbacks can be nested
        "max-params": 0,                // limits the number of parameters that can be used in the function declaration
        "max-statements": 0,            // specify the maximum number of statement allowed in a function
        "max-statements-per-line": 0,   // enforce a maximum number of statements allowed per line
        "newline-after-var": 0,         // require or disallow an empty line after var declarations
        "newline-before-return": 0,     // require an empty line before return statements
        "newline-per-chained-call": 0,  // require a newline after each call in a method chain
        "no-bitwise": 0,                // disallow use of bitwise operators
        "no-continue": 0,               // disallow continue statements
        "no-inline-comments": 0,        // disallow comments inline after code
        "no-multiple-empty-lines": 0,   // disallow multiple empty lines
        "no-negated-condition": 0,      // disallow negated conditions
        "no-nested-ternary": 0,         // disallow nested ternary expressions
        "no-plusplus": 0,               // disallow use of unary operators, ++ and --
        "no-restricted-syntax": 0,      // disallow specified syntax
        "no-ternary": 0,                // disallow the use of ternary operators
        "no-unneeded-ternary": 0,       // disallow ternary operators when simpler alternatives exist
        "one-var-declaration-per-line": 0, // require or disallow newlines around var declarations
        "operator-assignment": 0,       // require assignment operator shorthand where possible or prohibit it entirely
        "padded-blocks": 0,             // enforce padding within blocks
        "require-jsdoc": 0,             // require JSDoc comments
        "sort-vars": 0,                 // sort variables within the same declaration block
        "wrap-regex": 0,                // require regex literals to be wrapped in parentheses


        ////////// Best Practices //////////

        "accessor-pairs": 0,        // enforce getter and setter pairs in objects
        "array-callback-return": 0, // enforce return statements in callbacks of array methods
        "block-scoped-var": 0,      // treat var statements as if they were block scoped
        "complexity": 0,            // specify the maximum cyclomatic complexity allowed in a program
        "consistent-return": 0,     // require return statements to either always or never specify values
        "dot-notation": 0,          // encourages use of dot notation whenever possible
        "guard-for-in": 0,          // make sure for-in loops have an if statement
        "no-alert": 0,              // disallow the use of alert, confirm, and prompt
        "no-caller": 0,             // disallow use of arguments.caller or arguments.callee
        "no-div-regex": 0,          // disallow division operators explicitly at beginning of regular expression
        "no-empty-function": 0,     // disallow empty functions
        "no-eval": 0,               // disallow use of eval()
        "no-extend-native": 0,      // disallow adding to native types
        "no-extra-bind": 0,         // disallow unnecessary function binding
        "no-extra-label": 0,        // disallow unnecessary labels
        "no-floating-decimal": 0,   // disallow the use of leading or trailing decimal points in numeric literals
        "no-implicit-coercion": 0,  // disallow shorthand type conversions
        "no-implicit-globals": 0,   // disallow var and named function declarations in the global scope
        "no-implied-eval": 0,       // disallow use of eval()-like methods
        "no-invalid-this": 0,       // disallow this keywords outside of classes or class-like objects
        "no-iterator": 0,           // disallow usage of __iterator__ property
        "no-labels": 0,             // disallow use of labeled statements
        "no-lone-blocks": 0,        // disallow unnecessary nested blocks
        "no-loop-func": 0,          // disallow creation of functions within loops
        "no-magic-numbers": 0,      // disallow magic numbers
        "no-multi-str": 0,          // disallow use of multiline strings
        "no-native-reassign": 0,    // disallow reassignments of native objects
        "no-octal-escape": 0,       // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
        "no-process-env": 0,        // disallow use of process.env
        "no-proto": 0,              // disallow usage of __proto__ property
        "no-return-assign": 0,      // disallow use of assignment in return statement
        "no-script-url": 0,         // disallow use of javascript: urls.
        "no-self-compare": 0,       // disallow comparisons where both sides are exactly the same
        "no-sequences": 0,          // disallow use of comma operator
        "no-throw-literal": 0,      // disallow throwing literals as exceptions
        "no-unmodified-loop-condition": 0, // disallow unmodified loop conditions
        "no-void": 0,               // disallow void operators
        "no-warning-comments": 0,   // disallow usage of configurable warning terms in comments, e.g. TODO or FIXME
        "no-with": 0,               // disallow use of the with statement
        "radix": 0,                 // require use of the second argument for parseInt()
        "vars-on-top": 0,           // requires to declare all vars on top of their containing scope
        "wrap-iife": 0,             // require immediate function invocation to be wrapped in parentheses
        "yoda": 0,                  // require or disallow Yoda conditions


        ////////// Strict Mode //////////

        "strict": 0,          // controls location of Use Strict Directives


        ////////// Variables //////////

        "init-declarations": 0,           // require or disallow initialization in var declarations
        "no-catch-shadow": 0,             // disallow the catch clause parameter name being the same as a variable in the outer scope
        "no-label-var": 0,                // disallow labels that share a name with a variable
        "no-restricted-globals": 0,       // disallow specified global variables
        "no-shadow": 0,                   // disallow declaration of variables already declared in the outer scope
        "no-shadow-restricted-names": 0,  // disallow shadowing of names such as arguments
        "no-undefined": 0,                // disallow the use of undefined as an identifier
        "no-use-before-define": 0         // disallow use of variables before they are defined

    }
}