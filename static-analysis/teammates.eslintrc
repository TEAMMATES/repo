{
    // http://eslint.org/docs/rules/

    "ecmaFeatures": {
        "binaryLiterals": false,                    // enable binary literals
        "blockBindings": false,                     // enable let and const (aka block bindings)
        "defaultParams": false,                     // enable default function parameters
        "forOf": false,                             // enable for-of loops
        "generators": false,                        // enable generators
        "objectLiteralComputedProperties": false,   // enable computed object literal property names
        "objectLiteralDuplicateProperties": false,  // enable duplicate object literal properties in strict mode
        "objectLiteralShorthandMethods": false,     // enable object literal shorthand methods
        "objectLiteralShorthandProperties": false,  // enable object literal shorthand properties
        "octalLiterals": false,                     // enable octal literals
        "regexUFlag": false,                        // enable the regular expression u flag
        "regexYFlag": false,                        // enable the regular expression y flag
        "templateStrings": false,                   // enable template strings
        "unicodeCodePointEscapes": false,           // enable code point escapes
        "jsx": false                                // enable JSX
    },

    "env": {
        "browser": false,     // browser global variables.
        "node": false,        // Node.js global variables and Node.js-specific rules.
        "amd": false,         // defines require() and define() as global variables as per the amd spec.
        "mocha": false,       // adds all of the Mocha testing global variables.
        "jasmine": false,     // adds all of the Jasmine testing global variables for version 1.3 and 2.0.
        "phantomjs": false,   // phantomjs global variables.
        "jquery": false,      // jquery global variables.
        "prototypejs": false, // prototypejs global variables.
        "shelljs": false,     // shelljs global variables.
    },

    "globals": {
        // e.g. "angular": true
    },

    "plugins": [
        // e.g. "react" (must run `npm install eslint-plugin-react` first)
    ],

    "rules": {
        ////////// Unnecessary/Unused Ops/Vars/Chars //////////

        "comma-dangle": 2,                                  // disallow trailing commas in object literals
        "no-empty": 2,                                      // disallow empty statements
        "no-extra-boolean-cast": 2,                         // disallow double-negation boolean casts in a boolean context
        "no-extra-parens": 2,                               // disallow unnecessary parentheses
        "no-extra-semi": 2,                                 // disallow unnecessary semicolons
        "no-unreachable": 2,                                // disallow unreachable statements after a return, throw, continue, or break statement
        "no-unused-expressions": 2,                         // disallow usage of expressions in statement position
        "no-unused-vars": ["error", { "vars": "local" }],   // disallow declaration of variables that are not used in the code
        "no-useless-call": 2,                               // disallow unnecessary calls to .call() and .apply()
        "no-useless-concat": 2,                             // disallow unnecessary concatenation of literals or template literals
        "no-useless-escape": 2,                             // disallow unnecessary escape characters
        "semi": 2,                                          // require use of semicolons instead of ASI


        ////////// Possible Errors //////////

        "no-cond-assign": 0,          // disallow assignment in conditional expressions
        "no-console": 0,              // disallow use of console (off by default in the node environment)
        "no-constant-condition": 0,   // disallow use of constant expressions in conditions
        "no-control-regex": 0,        // disallow control characters in regular expressions
        "no-debugger": 0,             // disallow use of debugger
        "no-dupe-keys": 0,            // disallow duplicate keys when creating object literals
        "no-empty-class": 0,          // disallow the use of empty character classes in regular expressions
        "no-ex-assign": 0,            // disallow assigning to the exception in a catch block
        "no-func-assign": 0,          // disallow overwriting functions written as function declarations
        "no-inner-declarations": 0,   // disallow function or variable declarations in nested blocks
        "no-invalid-regexp": 0,       // disallow invalid regular expression strings in the RegExp constructor
        "no-negated-in-lhs": 0,       // disallow negation of the left operand of an in expression
        "no-obj-calls": 0,            // disallow the use of object properties of the global object (Math and JSON) as functions
        "no-regex-spaces": 0,         // disallow multiple spaces in a regular expression literal
        "no-reserved-keys": 0,        // disallow reserved words being used as object literal keys (off by default)
        "no-sparse-arrays": 0,        // disallow sparse arrays
        "valid-jsdoc": 0,             // Ensure JSDoc comments are valid (off by default)
        "valid-typeof": 0,            // Ensure that the results of typeof are compared against a valid string


        ////////// Best Practices //////////

        "no-else-return": 2,        // disallow else after a return in an if
        "no-fallthrough": 2,        // disallow fallthrough of case statements
        "no-lonely-if": 2,          // disallow if as the only statement in an else block
        "default-case": 2,          // require default case in switch statements

        "block-scoped-var": 0,      // treat var statements as if they were block scoped (off by default)
        "complexity": 0,            // specify the maximum cyclomatic complexity allowed in a program (off by default)
        "consistent-return": 0,     // require return statements to either always or never specify values
        "curly": 0,                 // specify curly brace conventions for all control statements
        "dot-notation": 0,          // encourages use of dot notation whenever possible
        "eqeqeq": 2,                // require the use of === and !==
        "guard-for-in": 0,          // make sure for-in loops have an if statement (off by default)
        "no-alert": 0,              // disallow the use of alert, confirm, and prompt
        "no-caller": 0,             // disallow use of arguments.caller or arguments.callee
        "no-div-regex": 0,          // disallow division operators explicitly at beginning of regular expression (off by default)
        "no-empty-label": 0,        // disallow use of labels for anything other then loops and switches
        "no-eval": 0,               // disallow use of eval()
        "no-extend-native": 0,      // disallow adding to native types
        "no-extra-bind": 0,         // disallow unnecessary function binding
        "no-floating-decimal": 0,   // disallow the use of leading or trailing decimal points in numeric literals (off by default)
        "no-implied-eval": 0,       // disallow use of eval()-like methods
        "no-iterator": 0,           // disallow usage of __iterator__ property
        "no-labels": 0,             // disallow use of labeled statements
        "no-lone-blocks": 0,        // disallow unnecessary nested blocks
        "no-loop-func": 0,          // disallow creation of functions within loops
        "no-multi-str": 0,          // disallow use of multiline strings
        "no-native-reassign": 0,    // disallow reassignments of native objects
        "no-octal": 0,              // disallow use of octal literals
        "no-octal-escape": 0,       // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
        "no-process-env": 0,        // disallow use of process.env (off by default)
        "no-proto": 0,              // disallow usage of __proto__ property
        "no-redeclare": 0,          // disallow declaring the same variable more then once
        "no-return-assign": 0,      // disallow use of assignment in return statement
        "no-script-url": 0,         // disallow use of javascript: urls.
        "no-self-compare": 0,       // disallow comparisons where both sides are exactly the same (off by default)
        "no-sequences": 0,          // disallow use of comma operator
        "no-warning-comments": 0,   // disallow usage of configurable warning terms in comments, e.g. TODO or FIXME (off by default)
        "no-with": 0,               // disallow use of the with statement
        "radix": 0,                 // require use of the second argument for parseInt() (off by default)
        "vars-on-top": 0,           // requires to declare all vars on top of their containing scope (off by default)
        "wrap-iife": 0,             // require immediate function invocation to be wrapped in parentheses (off by default)
        "yoda": 0,                  // require or disallow Yoda conditions


        ////////// Strict Mode //////////

        "global-strict": 0,   // (deprecated) require or disallow the "use strict" pragma in the global scope (off by default in the node environment)
        "no-extra-strict": 0, // (deprecated) disallow unnecessary use of "use strict"; when already in strict mode
        "strict": 0,          // controls location of Use Strict Directives


        ////////// Voids //////////

        "no-eq-null": 2,        // disallow comparisons to null without a type-checking operator
        "no-undef-init": 2,     // disallow use of undefined when initializing variables
        "use-isnan": 2,         // disallow comparisons with the value NaN


        ////////// Variables //////////

        "no-catch-shadow": 0,             // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
        "no-delete-var": 0,               // disallow deletion of variables
        "no-label-var": 0,                // disallow labels that share a name with a variable
        "no-shadow": 0,                   // disallow declaration of variables already declared in the outer scope
        "no-shadow-restricted-names": 0,  // disallow shadowing of names such as arguments
        "no-undef": 0,                    // disallow use of undeclared variables unless mentioned in a /*global */ block
        "no-use-before-define": 0,        // disallow use of variables before they are defined


        ////////// Node.js //////////

        "handle-callback-err": 0,   // enforces error handling in callbacks (off by default) (on by default in the node environment)
        "no-mixed-requires": 0,     // disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
        "no-new-require": 0,        // disallow use of new operator with the require function (off by default) (on by default in the node environment)
        "no-path-concat": 0,        // disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
        "no-process-exit": 0,       // disallow process.exit() (on by default in the node environment)
        "no-restricted-modules": 0, // restrict usage of specified node modules (off by default)
        "no-sync": 0,               // disallow use of synchronous methods (off by default)


        ////////// Whitespace Styles //////////

        "array-bracket-spacing": 2,                         // disallow space inside array brackets
        "comma-spacing": 2,                                 // disallow space before comma, require space after comma
        "computed-property-spacing": 2,                     // disallow space inside property brackets
        "key-spacing": 2,                                   // disallow space before colon, require space after colon in object literal properties
        "keyword-spacing": 2,                               // require space after certain keywords
        "no-mixed-spaces-and-tabs": 2,                      // disallow mixed spaces and tabs for indentation
        "no-spaced-func": 2,                                // disallow space between function identifier and application
        "object-curly-spacing": ["error", "always"],        // require space inside object blocks
        "semi-spacing": 2,                                  // disallow space before semicolon
        "space-before-blocks": 2,                           // require space before blocks
        "space-before-function-paren": ["error", "never"],  // disallow space after function names
        "space-in-parens": 2,                               // disallow space inside parentheses
        "space-infix-ops": 2,                               // require space around operators
        "space-unary-ops": 2,                               // disallow space before/after unary operators

        "eol-last": 2,                                                  // enforce newline at the end of file, with no multiple empty lines
        "indent": ["error", 4, { "SwitchCase": 1 }],                    // enforce consistent indentation of 4 spaces, including switch cases
        "no-irregular-whitespace": 2,                                   // disallow irregular whitespace outside of strings and comments
        "no-multi-spaces": 2,                                           // disallow use of multiple spaces
        "no-trailing-spaces": ["error", { "skipBlankLines": true}],     // disallow trailing whitespace at the end of lines
        "spaced-comment": ["error", "always"],                          // require a space immediately following the // in a line comment


        ////////// Naming Conventions //////////

        "camelcase": 2,                 // require camel case names
        "new-cap": 2,                   // require a capital letter for constructors
        "no-underscore-dangle": 2,      // disallow dangling underscores in identifiers


        ////////// Constructors //////////

        "one-var": ["error", "never"],      // allow just one var statement per function
        "new-parens": 2,                    // disallow the omission of parentheses when invoking a constructor with no arguments
        "no-array-constructor": 2,          // disallow use of the Array constructor
        "no-new": 2,                        // disallow use of new operator when not part of the assignment or comparison
        "no-new-func": 2,                   // disallow use of new operator for Function object
        "no-new-object": 2,                 // disallow use of the Object constructor
        "no-new-wrappers": 2,               // disallows creating new instances of String, Number, and Boolean


        ////////// Stylistic Issues //////////

        "brace-style": 0,               // enforce one true brace style (off by default)
        "comma-style": 0,               // enforce one true comma style (off by default)
        "consistent-this": 0,           // enforces consistent naming when capturing the current execution context (off by default)
        "func-style": 0,                // enforces use of function declarations or expressions (off by default)
        "max-nested-callbacks": 0,      // specify the maximum depth callbacks can be nested (off by default)
        "no-inline-comments": 0,        // disallow comments inline after code (off by default)
        "no-multiple-empty-lines": 0,   // disallow multiple empty lines
        "no-nested-ternary": 0,         // disallow nested ternary expressions (off by default)
        "no-ternary": 0,                // disallow the use of ternary operators (off by default)
        "operator-assignment": 0,       // require assignment operator shorthand where possible or prohibit it entirely (off by default)
        "padded-blocks": 0,             // enforce padding within blocks (off by default)
        "quote-props": 0,               // require quotes around object literal property names (off by default)
        "quotes": 0,                    // specify whether double or single quotes should be used
        "sort-vars": 0,                 // sort variables within the same declaration block (off by default)
        "wrap-regex": 0,                // require regex literals to be wrapped in parentheses (off by default)


        ////////// ECMAScript 6 //////////

        "no-var": 0,          // require let or const instead of var (off by default)
        "generator-star": 0,  // enforce the position of the * in generator functions (off by default)


        ////////// Legacy //////////

        "max-depth": 0,       // specify the maximum depth that blocks can be nested (off by default)
        "max-len": 0,         // specify the maximum length of a line in your program (off by default)
        "max-params": 0,      // limits the number of parameters that can be used in the function declaration. (off by default)
        "max-statements": 0,  // specify the maximum number of statement allowed in a function (off by default)
        "no-bitwise": 0,      // disallow use of bitwise operators (off by default)
        "no-plusplus": 0      // disallow use of unary operators, ++ and -- (off by default)
    }
}